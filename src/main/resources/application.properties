# ========================================
# HsCodeRadar 애플리케이션 기본 설정
# ========================================

# 애플리케이션 이름 설정
spring.application.name=hscoderadar

# API 컨텍스트 패스 설정 - 모든 REST API 엔드포인트 앞에 /api 접두사 추가
# 예: http://localhost:8081/api/auth/login
server.servlet.context-path=/api

# 환경변수 파일 로드 설정 (선택사항)
# .env 파일이 존재하면 로드하고, 없으면 무시하여 애플리케이션 시작 실패 방지
spring.config.import=optional:file:.env[.properties]

# ========================================
# 프로파일 및 서버 설정
# ========================================

# 기본 활성 프로파일 설정
# inmemory_db : 인메모리 DB 사용할시
# dev : 기존 개발 프로파일
spring.profiles.active=dev

# 서버 포트 설정 - 프론트엔드(3000)와 구분하여 8081 포트 사용
server.port=8081

# ========================================
# Spring AI 설정 (비활성화)
# ========================================

# Spring AI 모델 자동 구성 비활성화
# AI 기능을 사용하지 않으므로 자동 구성을 비활성화하여 시작 시간 단축
spring.ai.model.chat=none

# ========================================
# JPA/Hibernate 공통 설정
# ========================================

# SQL 쿼리 로깅 활성화 - 개발 중 실행되는 SQL 확인 가능
spring.jpa.show-sql=true

# SQL 쿼리 포맷팅 - 가독성을 위해 들여쓰기와 줄바꿈 적용
spring.jpa.properties.hibernate.format_sql=true

# ========================================
# Spring Web MVC 설정
# ========================================

# 정적 리소스 매핑 설정 (현재 주석 처리됨)
# spring.web.resources.add-mappings=false를 활성화하면
# 정적 리소스(CSS, JS, 이미지 등) 제공을 중단하고 404 오류 발생
# 이는 SPA(Single Page Application) 환경에서 프론트엔드가 별도 서버로 운영될 때 사용
# spring.web.resources.add-mappings=false

# ========================================
# JSON 응답 형식 설정
# ========================================

# 날짜/시간 필드를 타임스탬프 숫자가 아닌 ISO-8601 문자열 형식으로 출력
# 예: "2024-01-15T10:30:00.000Z" (타임스탬프: 1705312200000 대신)
spring.jackson.serialization.write-dates-as-timestamps=false

# JSON 응답 들여쓰기 활성화 - 개발 시 API 응답 가독성 향상
# 운영 환경에서는 네트워크 트래픽 절약을 위해 false 권장
spring.jackson.serialization.indent-output=true

# null 값도 JSON 응답에 포함하여 API 스키마 일관성 보장
# 클라이언트에서 예상하는 필드가 항상 응답에 포함되어 안정성 확보
spring.jackson.default-property-inclusion=ALWAYS

# ========================================
# 로깅 설정 (디버깅 및 모니터링)
# ========================================

# 응답 래핑 로직 디버깅용 로그 레벨
# ApiResponse 래퍼가 올바르게 적용되는지 확인 가능
logging.level.com.hscoderadar.common.response=DEBUG

# 전역 예외 처리 디버깅용 로그 레벨
# GlobalExceptionHandler가 예외를 올바르게 처리하는지 확인 가능
logging.level.com.hscoderadar.common.exception=DEBUG

# Spring Security 상세 로그 활성화
# 인증/인가 과정, 필터 체인 동작, OAuth2 로그인 과정 등을 상세히 확인 가능
# 보안 설정 디버깅에 매우 유용하지만 민감한 정보가 로그에 노출될 수 있음
logging.level.org.springframework.security=DEBUG

# ========================================
# JWT 토큰 설정
# ========================================

# JWT 서명에 사용할 비밀키 (환경변수에서 로드)
# 충분히 긴 랜덤 문자열을 사용해야 하며, 운영 환경에서는 안전하게 관리 필요
jwt.secret-key=${JWT_SECRETKEY}

# Access Token 만료 시간 (밀리초 단위)
# 3600000ms = 1시간, 보안과 사용성의 균형을 고려한 설정
jwt.access-token-expiration-ms=3600000

# Refresh Token 만료 시간 (밀리초 단위)
# 1209600000ms = 14일, Access Token 갱신용으로 장기간 유효
jwt.refresh-token-expiration-ms=1209600000

# ========================================
# OAuth2 프론트엔드 연동 설정
# ========================================

# OAuth2 로그인 성공 후 프론트엔드로 리디렉션할 콜백 URL
# 백엔드에서 JWT 토큰을 생성한 후 이 URL로 토큰과 함께 리디렉션
oauth2.frontend.callback-url=http://localhost:3000/auth/callback

# ========================================
# Google OAuth2 클라이언트 설정
# ========================================

# Google 클라이언트 ID (공개 정보)
spring.security.oauth2.client.registration.google.client-id=978337244597-qj3759k46cbuivabdjjsrsr8p2je5k29.apps.googleusercontent.com

# Google 클라이언트 시크릿 (환경변수에서 로드)
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_SECRETKEY}

# Google에서 요청할 사용자 정보 범위
# profile: 기본 프로필 정보(이름, 프로필 이미지 등)
# email: 이메일 주소
spring.security.oauth2.client.registration.google.scope=profile,email

# ========================================
# Naver OAuth2 클라이언트 설정
# ========================================

# 네이버 클라이언트 ID (공개 정보)
spring.security.oauth2.client.registration.naver.client-id=O20sXz7ht7jTqcFqJ36P

# 네이버 클라이언트 시크릿 (환경변수에서 로드)
spring.security.oauth2.client.registration.naver.client-secret=${NAVER_SECRETKEY}

# OAuth2 인증 흐름 타입 - Authorization Code Grant 방식 사용
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code

# 네이버 로그인 후 백엔드로 리디렉션될 URL 패턴
# {baseUrl}과 {registrationId}는 Spring Security가 자동으로 치환
spring.security.oauth2.client.registration.naver.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}

# 네이버에서 요청할 사용자 정보 범위
spring.security.oauth2.client.registration.naver.scope=name,email

# 네이버 OAuth2 제공자 엔드포인트 설정
# Spring Security가 네이버 OAuth2 서버와 통신할 때 사용하는 URL들
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me

# 네이버 응답에서 사용자 식별자가 있는 필드명
# 네이버는 'response' 키 안에 실제 사용자 정보를 중첩하여 제공
spring.security.oauth2.client.provider.naver.user-name-attribute=response

# ========================================
# Kakao OAuth2 클라이언트 설정
# ========================================

# 카카오 클라이언트 ID (공개 정보)
spring.security.oauth2.client.registration.kakao.client-id=7d8e72838773807cda73c3c42eb4bb52

# 카카오 클라이언트 시크릿 (환경변수에서 로드)
spring.security.oauth2.client.registration.kakao.client-secret=${KAKAO_SECRETKEY}

# OAuth2 인증 흐름 타입
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code

# 카카오 로그인 후 백엔드로 리디렉션될 URL 패턴
spring.security.oauth2.client.registration.kakao.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}

# 카카오 클라이언트 인증 방식 - POST 방식으로 클라이언트 시크릿 전송
spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post

# 카카오에서 요청할 사용자 정보 범위
# profile_nickname: 카카오톡 프로필 닉네임 접근 권한
spring.security.oauth2.client.registration.kakao.scope=profile_nickname

# 카카오 OAuth2 제공자 엔드포인트 설정
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me

# 카카오 응답에서 사용자 식별자가 있는 필드명
# 카카오는 'id' 필드에 사용자 고유 번호를 제공
spring.security.oauth2.client.provider.kakao.user-name-attribute=id
